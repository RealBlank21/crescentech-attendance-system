version: '3.8' # Or higher

services:
  db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: crescentech-db
      # IMPORTANT: For production, use Docker secrets for passwords instead of plaintext environment variables.
      MYSQL_ROOT_PASSWORD: CrEsCeNtEch@3240
      MYSQL_USER: crescentuser
      MYSQL_PASSWORD: CrEsCeNtEch@3240
      MYSQL_LOG_CONSOLE: "true" # Useful for debugging
    command:
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --skip-character-set-client-handshake
      - --max-allowed-packet=128M
    ports:
      - "3306:3306" # Exposes DB port. Ensure this is secured if accessible externally.
    volumes:
      - mysql_data:/var/lib/mysql # Persists MySQL data
    healthcheck:
      # This command checks if the MySQL server is responsive.
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$${MYSQL_ROOT_PASSWORD}"]
      timeout: 5s    # How long to wait for the command to complete.
      retries: 10    # Number of times to retry before marking as unhealthy.
      interval: 5s   # How often to run the health check.
      start_period: 30s # Optional: Grace period for the service to start before health checks begin failing tasks.
                        # MySQL might take some time to initialize.
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure # Swarm will restart the service if it fails (e.g., becomes unhealthy).

  web:
    image: adlicrescentech/crescentech-attendance-system:latest
    ports:
      - "5000:5000"
    environment:
      - MYSQL_HOST=db # Service discovery: 'db' resolves to the DB container's IP in the Docker network.
      - MYSQL_USERNAME=crescentuser
      # IMPORTANT: For production, use Docker secrets for passwords.
      - MYSQL_PASSWORD=CrEsCeNtEch@3240
      - MYSQL_DATABASE=crescentech-db
      - MYSQL_PORT=3306
      - FLASK_ENV=production
      - PYTHONUNBUFFERED=1 # Ensures Python output is sent straight to terminal/logs without buffering.
    volumes:
      - ./static/uploads:/app/static/uploads # Mounts local uploads directory into the container.
                                             # Ensure this path is correct relative to your compose file or use a named volume.
    depends_on:
      db:
        condition: service_healthy
    command: > # Using '>' for a multi-line command, executed via sh -c
      sh -c "
        echo 'Web service waiting for 30 seconds after DB is healthy before starting application...';
        sleep 30;
        echo 'Attempting to start the web application with Gunicorn...';
        exec gunicorn --bind 0.0.0.0:5000 wsgi:app
      "
    healthcheck:
      # This command checks if your web application is responding.
      test: ["CMD", "curl", "-f", "http://localhost:5000/"] # Adjust path if your app has a specific health endpoint.
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s # Grace period for the web application to initialize before health checks start.
                       # Note: This start_period for the healthcheck should be longer than any initial sleep/wait time.
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

volumes:
  mysql_data:
    driver: local # Explicitly defining the driver is good practice.
